---
import Layout from "@/layouts/Layout.astro";
import Back from "@/assets/Back.astro";
---

<Layout>
  <a href="/" class="fixed top-4 left-4 z-50">
    <Back class="w-6" />
  </a>

  <main class="relative flex flex-1 flex-col items-center justify-center">
    <div
      id="viewerContainer"
      class="absolute inset-0 h-svh w-screen touch-pan-x touch-pan-y overflow-auto"
    >
      <div id="pdfViewer" class="pdfViewer h-auto w-full"></div>
    </div>

    <div
      style="--filter: transparent;"
      class="pointer-events-none absolute inset-0 bg-[var(--filter)] mix-blend-multiply filter"
    >
    </div>

    <div
      class="fixed bottom-8 z-10 flex rounded-full border border-neutral-800 bg-neutral-900 p-2"
    >
      <button
        id="filter-normal"
        class:list={[
          "min-w-20 rounded-full bg-cover bg-no-repeat px-4 py-2 text-neutral-400 transition-transform active:scale-105",
          true && "bg-(image:--mesh) text-neutral-950",
        ]}
      >
        Normal
      </button>

      <button
        id="filter-night"
        class:list={[
          "min-w-20 rounded-full bg-cover bg-no-repeat px-4 py-2 text-neutral-400 transition-transform active:scale-105",
          false && "bg-(image:--mesh) text-neutral-950",
        ]}
      >
        Nit
      </button>

      <button
        id="filter-day"
        class:list={[
          "min-w-20 rounded-full bg-cover bg-no-repeat px-4 py-2 text-neutral-400 transition-transform active:scale-105",
          false && "bg-(image:--mesh) text-neutral-950",
        ]}
      >
        Dia
      </button>
    </div>
  </main>
</Layout>

<script>
  import { getDocument, GlobalWorkerOptions } from "pdfjs-dist";
  import {
    PDFViewer,
    EventBus,
    PDFLinkService,
  } from "pdfjs-dist/web/pdf_viewer.mjs";
  import "pdfjs-dist/web/pdf_viewer.css";

  const MAX_CANVAS_PIXELS = 0; // CSS-only zooming.
  const TEXT_LAYER_MODE = 0; // DISABLE
  const MAX_IMAGE_SIZE = 1024 * 1024;
  const CMAP_URL = "cmaps/";
  const CMAP_PACKED = true;

  // Configuración del worker de PDF.js
  GlobalWorkerOptions.workerSrc = "pdf.worker.min.mjs";

  // Elementos del DOM
  const container = document.getElementById(
    "viewerContainer"
  ) as HTMLDivElement;

  // Inicialización del visor de PDF
  const eventBus = new EventBus();
  const linkService = new PDFLinkService({ eventBus });

  const pdfViewer = new PDFViewer({
    container,
    eventBus,
    linkService,
    maxCanvasPixels: MAX_CANVAS_PIXELS,
    textLayerMode: TEXT_LAYER_MODE,
  });

  // Cargar el PDF con barra de progreso
  const url = "programa-carnaval-2025.pdf";
  const loadingTask = getDocument({
    url,
    maxImageSize: MAX_IMAGE_SIZE,
    cMapUrl: CMAP_URL,
    cMapPacked: CMAP_PACKED,
  });

  loadingTask.promise.then((pdf) => {
    pdfViewer.setDocument(pdf);
    linkService.setDocument(pdf, null);

    // Ajustar el zoom y la disposición de las páginas
    pdf.getPage(2).then((page) => {
      const viewport = page.getViewport({ scale: 1.4 });
      const scale = container.clientWidth / viewport.width;
      pdfViewer.currentScaleValue = scale.toString();
    });
  });

  let initialDistance: number | null = null;

  // Función para calcular la distancia entre dos puntos táctiles
  function getTouchDistance(touch1: Touch, touch2: Touch): number {
    const dx = touch1.clientX - touch2.clientX;
    const dy = touch1.clientY - touch2.clientY;
    return Math.sqrt(dx * dx + dy * dy);
  }

  // Evento para detectar el inicio del gesto táctil
  container.addEventListener("touchstart", (event: TouchEvent) => {
    if (event.touches.length === 2) {
      // Si hay dos dedos, calcular la distancia inicial
      initialDistance = getTouchDistance(event.touches[0], event.touches[1]);
    }
  });

  // Evento para detectar el movimiento táctil
  container.addEventListener("touchmove", (event: TouchEvent) => {
    if (event.touches.length === 2 && initialDistance !== null) {
      // Calcular la nueva distancia entre los dedos
      const newDistance = getTouchDistance(event.touches[0], event.touches[1]);

      // Calcular el factor de escala
      const scale = newDistance / initialDistance;

      // Aplicar el zoom al visor de PDF
      pdfViewer.currentScale *= scale;

      // Actualizar la distancia inicial
      initialDistance = newDistance;
    }
  });

  // Evento para detectar el fin del gesto táctil
  container.addEventListener("touchend", () => {
    initialDistance = null; // Reiniciar la distancia inicial
  });
</script>

<script>
  const filter = document.querySelector(".filter") as HTMLElement;
  const filter_night = document.querySelector(
    "#filter-night"
  ) as HTMLButtonElement;
  const filter_day = document.querySelector("#filter-day") as HTMLButtonElement;
  const filter_normal = document.querySelector(
    "#filter-normal"
  ) as HTMLButtonElement;

  filter_night.addEventListener("click", () => {
    filter.style.setProperty("--filter", `var(--filter-red`);

    filter_night.classList.add("bg-(image:--mesh)");
    filter_night.classList.add("text-neutral-950");
    filter_day.classList.remove("bg-(image:--mesh)");
    filter_day.classList.remove("text-neutral-950");
    filter_normal.classList.remove("bg-(image:--mesh)");
    filter_normal.classList.remove("text-neutral-950");
  });

  filter_day.addEventListener("click", () => {
    filter.style.setProperty("--filter", `var(--filter-blue`);

    filter_night.classList.remove("bg-(image:--mesh)");
    filter_night.classList.remove("text-neutral-950");
    filter_day.classList.add("bg-(image:--mesh)");
    filter_day.classList.add("text-neutral-950");
    filter_normal.classList.remove("bg-(image:--mesh)");
    filter_normal.classList.remove("text-neutral-950");
  });

  filter_normal.addEventListener("click", () => {
    filter.style.setProperty("--filter", `transparent`);

    filter_night.classList.remove("bg-(image:--mesh)");
    filter_night.classList.remove("text-neutral-950");
    filter_day.classList.remove("bg-(image:--mesh)");
    filter_day.classList.remove("text-neutral-950");
    filter_normal.classList.add("bg-(image:--mesh)");
    filter_normal.classList.add("text-neutral-950");
  });
</script>
