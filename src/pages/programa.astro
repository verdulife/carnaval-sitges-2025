---
import Layout from "@/layouts/Layout.astro";
import Back from "@/assets/Back.astro";
---

<Layout>
  <a href="/" class="fixed top-4 left-4 z-50">
    <Back class="w-6" />
  </a>

  <main class="relative flex flex-1 flex-col items-center justify-center">
    <div
      id="progress-container"
      class="fixed top-1/2 left-1/2 h-2 w-2/3 -translate-x-1/2 -translate-y-1/2 rounded-full bg-neutral-700"
      style="display: none;"
    >
      <div
        id="progress-bar"
        class="h-full w-0 rounded-full bg-(image:--mesh) bg-cover bg-no-repeat"
      >
      </div>
    </div>

    <pinch-zoom scale="0.5" class="pinch-zoom w-[200%] cursor-grab">
      <div
        id="pdf-container"
        class="flex size-full touch-pan-x touch-pan-y flex-col gap-1 overflow-auto"
      >
      </div>
    </pinch-zoom>

    <div
      style="--filter: transparent;"
      class="pointer-events-none absolute inset-0 bg-[var(--filter)] mix-blend-multiply filter"
    >
    </div>

    <div
      class="fixed bottom-8 z-10 flex rounded-full border border-neutral-800 bg-neutral-900 p-2"
    >
      <button
        id="filter-normal"
        class:list={[
          "min-w-20 rounded-full bg-cover bg-no-repeat px-4 py-2 text-neutral-400 transition-transform active:scale-105",
          true && "bg-(image:--mesh) text-neutral-950",
        ]}
      >
        Normal
      </button>

      <button
        id="filter-day"
        class:list={[
          "min-w-20 rounded-full bg-cover bg-no-repeat px-4 py-2 text-neutral-400 transition-transform active:scale-105",
          false && "bg-(image:--mesh) text-neutral-950",
        ]}
      >
        Dia
      </button>

      <button
        id="filter-night"
        class:list={[
          "min-w-20 rounded-full bg-cover bg-no-repeat px-4 py-2 text-neutral-400 transition-transform active:scale-105",
          false && "bg-(image:--mesh) text-neutral-950",
        ]}
      >
        Nit
      </button>
    </div>
  </main>
</Layout>

<style is:global>
  .page {
    width: 100%;
    object-fit: contain;

    @media (width >= 64rem) {
      height: 100svh;
      width: auto;
    }
  }
</style>

<script>
  import type PinchZoom from "pinch-zoom-element";
  import { pages } from "@/assets/high";

  const container = document.querySelector("#pdf-container") as HTMLElement;
  const progressContainer = document.querySelector(
    "#progress-container"
  ) as HTMLElement;
  const progressBar = document.querySelector("#progress-bar") as HTMLElement;
  const pinchZoom = document.querySelector(".pinch-zoom") as PinchZoom;

  pinchZoom.setTransform({
    x: container.clientWidth / 4,
    scale: 0.5,
  });

  progressContainer.style.display = "block";

  // create img elements from pages and promise them
  const images = pages.map((page, i) => {
    const imageNum = i + 1;
    const percentage = (imageNum / pages.length) * 100;

    return new Promise((resolve) => {
      const img = new Image();
      img.src = page.src;
      img.alt = page.alt;
      img.width = container.clientWidth * 2;
      img.classList.add("page");
      img.onload = () => resolve(img);
    }).then((img) => {
      progressBar.style.width = `${percentage}%`;
      return img;
    });
  });

  const allImages = Promise.all(images);

  allImages.then((images) => {
    progressContainer.style.display = "none";

    images.forEach((img: any) => {
      container.appendChild(img);
    });
  });
</script>

<script>
  const filter = document.querySelector(".filter") as HTMLElement;
  const filter_night = document.querySelector(
    "#filter-night"
  ) as HTMLButtonElement;
  const filter_day = document.querySelector("#filter-day") as HTMLButtonElement;
  const filter_normal = document.querySelector(
    "#filter-normal"
  ) as HTMLButtonElement;

  filter_night.addEventListener("click", () => {
    filter.style.setProperty("--filter", `var(--filter-red`);

    filter_night.classList.add("bg-(image:--mesh)");
    filter_night.classList.add("text-neutral-950");
    filter_day.classList.remove("bg-(image:--mesh)");
    filter_day.classList.remove("text-neutral-950");
    filter_normal.classList.remove("bg-(image:--mesh)");
    filter_normal.classList.remove("text-neutral-950");
  });

  filter_day.addEventListener("click", () => {
    filter.style.setProperty("--filter", `var(--filter-blue`);

    filter_night.classList.remove("bg-(image:--mesh)");
    filter_night.classList.remove("text-neutral-950");
    filter_day.classList.add("bg-(image:--mesh)");
    filter_day.classList.add("text-neutral-950");
    filter_normal.classList.remove("bg-(image:--mesh)");
    filter_normal.classList.remove("text-neutral-950");
  });

  filter_normal.addEventListener("click", () => {
    filter.style.setProperty("--filter", `transparent`);

    filter_night.classList.remove("bg-(image:--mesh)");
    filter_night.classList.remove("text-neutral-950");
    filter_day.classList.remove("bg-(image:--mesh)");
    filter_day.classList.remove("text-neutral-950");
    filter_normal.classList.add("bg-(image:--mesh)");
    filter_normal.classList.add("text-neutral-950");
  });
</script>
